#include <iostream>
#include "HUMania.hpp"
#include <vector>
using namespace std;

// Exact x,y,w,h values of each image/animal as extracted from http://www.spritecow.com/.
//  First rectangle is srcRect, second is moverRect
Unit pigeon = {{7, 88, 155, 103}, {30, 40, 50, 50}};
Unit pigeon1 = {{0, 273, 153, 84}, {30, 40, 50, 50}};
Unit pigeon2 = {{2, 361, 159, 124}, {30, 40, 50, 50}};
Unit butterfly = {{257, 24, 173, 134}, {30, 40, 50, 50}};
Unit butterfly1 = {{257, 182, 192, 214}, {30, 40, 50, 50}};
Unit butterfly2 = {{248, 432, 248, 179}, {30, 40, 50, 50}};
Unit bee = {{527, 138, 194, 115}, {30, 40, 50, 50}};
Unit bee1 = {{527, 243, 194, 116}, {30, 40, 50, 50}};
Unit bee2 = {{540, 370, 193, 115}, {30, 40, 50, 50}};
// Defining all three animals vectors
vector<Animal> pigeons;
vector<Animal> butterflys;
vector<Animal> bees;

// Animation function is responsible for animation and the movement of the birds/bees/butterflies along the x axis.

void Play_Animation(Animal &anml, Animation animations)
{

    // animal.state tells the type of animal to be displayed i.e wings up or down etc
    switch (anml.state)
    {
    case 0:                                                   // initial state with wings up
        anml.animals.srcRect = animations.animation1.srcRect; // updating image
        anml.state = 1;                                       // setting the next state
        break;
    case 1:                                                   // intermediate state with wings transitioning down
        anml.animals.srcRect = animations.animation2.srcRect; // updating image
        anml.state = 2;                                       // setting the next state
        break;

    case 2:                                                   // state with wings down
        anml.animals.srcRect = animations.animation3.srcRect; // updating image
        anml.state = 0;                                       // setting the next state
        break;

    default:
        break;
    }

    anml.animals.moverRect.x = anml.animals.moverRect.x + 10; // To move animal along x-axis

    // To make the animal move in loops, this makes sure once the animal gets out of the right of screen it reenters from left.
    if (anml.animals.moverRect.x > 999)
    {
        // Restarting its cordinates from the left of screen as it passes max width(screen)
        anml.animals.moverRect.x %= 1000;
        Play_Animation(anml, animations);
    }
}

// drawobject function keeps rendering the animals appearing on the screen. The loop has been used to continue rendering all the animals generated by the user by clicking on the screen.
void draw_each_animal(SDL_Renderer *gRenderer, SDL_Texture *assets, vector<Animal> &animal, Animation animations)
{
    for (int i = 0; i < animal.size(); i++)
    {
        Play_Animation(animal[i], animations);
        SDL_RenderCopy(gRenderer, assets, &animal[i].animals.srcRect, &animal[i].animals.moverRect);
    }
}

// Draw object calls the draw_each function to draw every type (pigeon,bee,butterfly) of animal depending on pointer passed
void drawObjects(SDL_Renderer *gRenderer, SDL_Texture *assets)
{

    // creating animation clas objects storing the 3 states of each animal
    Animation pigeonAnimationstype = {pigeon, pigeon1, pigeon2};
    Animation beesAnimationstype = {bee, bee1, bee2};
    Animation butterfliesAnimationstype = {butterfly, butterfly1, butterfly2};

    // calling draw function on each animal
    draw_each_animal(gRenderer, assets, pigeons, pigeonAnimationstype);
    draw_each_animal(gRenderer, assets, bees, beesAnimationstype);
    draw_each_animal(gRenderer, assets, butterflys, butterfliesAnimationstype);
}

// RandomAnimalSelection randomly selects an animal to be rendered.
void RandomAnimalSelection()
{
    // generate a random value 1-3
    int rand_value = (rand() % 3) + 1;
    // creating animal class object and declaring a random type depending on the generated value.
    Animal anml;
    anml.state = 0;

    switch (rand_value)
    {
    case 1:
        // set anml as pigeon
        anml.animals = pigeon;
        pigeons.push_back(anml);
        break;
    case 2:

        // set anml as bee
        anml.animals = bee;
        bees.push_back(anml);
        break;
    case 3:

        // set anml as butterfly
        anml.animals = butterfly;
        butterflys.push_back(anml);
        break;
    }
}

void createObject(int x, int y)
{
    // setting the moverRect of each animal according to the clicked cordinates so they can be generated there
    pigeon.moverRect = {x, y, 40, 40};
    butterfly.moverRect = {x, y, 40, 40};
    bee.moverRect = {x, y, 40, 40};
    // Randomly choosing a pigeon bee or butterfly
    RandomAnimalSelection();
}
